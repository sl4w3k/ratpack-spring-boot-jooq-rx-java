buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath "io.franzbecker:gradle-lombok:1.7"
        classpath 'com.oracle:ojdbc7:12.1.0.1'
        classpath 'org.jooq:jooq-codegen:3.10.6'
    }
}

apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: 'idea'

dependencies {
    compile project(':interface')
    compile 'log4j:log4j:1.2.17'
    compile "org.springframework:spring-context:$springVersion"
    compile 'com.oracle:ojdbc7:12.1.0.1'
    compile 'org.jooq:jooq:3.10.6'
}

task generate {
    // Use your favourite XML builder to construct the code generation configuration file
    // ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
        jdbc() {
            driver('oracle.jdbc.OracleDriver')
            url('***')
            user('***')
            password('***')
        }
        generator() {
            database() {
                name('org.jooq.util.oracle.OracleDatabase')
                inputSchema('***')
                includes('.*')
            }

            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                pojos true
                daos true
            }
            target() {
                packageName('pl.homecenter.japlace.generated.db')
                directory('jdbc-impl/src/main/java')
            }
        }
    }

    // Run the code generator
    // ----------------------
    org.jooq.util.GenerationTool.generate(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
}
